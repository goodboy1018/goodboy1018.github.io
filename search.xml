<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spirng源码</title>
      <link href="/posts/1.html"/>
      <url>/posts/1.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### Spring源码</span><br><span class="line"></span><br><span class="line">​     </span><br><span class="line"></span><br><span class="line">   Spring的执行流程:</span><br><span class="line"></span><br><span class="line">![image-20220811094012328](C:\Users\是昊昊昊昊能\AppData\Roaming\Typora\typora-user-images\image-20220811094012328.png)</span><br><span class="line"></span><br><span class="line">&gt; BeanDefinitionReader是一个简单的接口，是用于读取Spring配置文件的内容，并转换为BeanDefinition。0.</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">- PropertiesBeanDefinitionReader：是一个具体实现类，可以从properties文件读取Bean定义信息。</span><br><span class="line">- XmlBeanDefinitionReader：具体实现类，可以从XML文件读取Bean定义信息。</span><br></pre></td></tr></table></figure><blockquote><p>BeanDefinition:存储bean的信息,</p><p>BeanFactoryPostProcessor: 加载配置文件的时候不会进行值的替换,这时需要调用BeanFactory的后置处理器做一些字符替换</p><p>map结构存储bean</p><p> beanFactory:定义获取bean及bean的各种属性,提供访问bean容器的入口。(等同于容器,操作beanfactory等于操作容器)</p></blockquote><p>Spring核心源码（包含13个方法）:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="built_in">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line"><span class="comment">// 准备此上下文以进行刷新。</span></span><br><span class="line">            <span class="comment">//设置容器创建时间,和一些空集合</span></span><br><span class="line">prepareRefresh();</span><br><span class="line"></span><br><span class="line">         </span><br><span class="line"><span class="comment">// 告诉子类刷新内部 bean 工厂。</span></span><br><span class="line">            <span class="comment">//先创建beanFactory   (DefaultListableBeanFactory beanFactory = createBeanFactory();)</span></span><br><span class="line">            <span class="comment">//调用loadBeanDefinitions(beanFactory);使用BeanDefinitionReader读取配置文件</span></span><br><span class="line">            <span class="comment">//从配置文件加载bean的定义信息封装成一个集合,保存到BeanDefinition中</span></span><br><span class="line"><span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> obtainFreshBeanFactory();</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 准备在此上下文中使用的bean工厂</span></span><br><span class="line">            <span class="comment">//(此时容器中除了一些bean信息，然后是空的)所以要给bean工厂设置一些属性值</span></span><br><span class="line">prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 允许在上下文子类中对bean工厂进行后处理。</span></span><br><span class="line">                <span class="comment">//空,留给子类扩展使用</span></span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用在上下文中注册为bean的工厂处理器。</span></span><br><span class="line">                <span class="comment">//实例化并调用所有已注册的 BeanFactoryPostProcessor</span></span><br><span class="line">                <span class="comment">//( 准备工作：准备beanPostProcessor,准备监听器事件,广播器)</span></span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//实例化并注册所有 BeanPostProcessor bean，如果给定</span></span><br><span class="line">                <span class="comment">//则尊重显式顺序。 &lt;p&gt;必须在应用程序 bean 的任何实例化之前调用</span></span><br><span class="line"><span class="comment">//注册拦截bean创建的bean处理器</span></span><br><span class="line"><span class="number">1.</span>registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为此上下文初始化消息源。</span></span><br><span class="line">                <span class="comment">//国际化的一些操作</span></span><br><span class="line"><span class="number">2.</span>initMessageSource();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为此上下文初始化事件多播器</span></span><br><span class="line"><span class="number">3.</span>initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化特定上下文子类中的其他特殊 bean。</span></span><br><span class="line">                <span class="comment">//空</span></span><br><span class="line"><span class="number">4.</span>onRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查侦听器 bean 并注册它们。</span></span><br><span class="line"><span class="number">5.</span>registerListeners();</span><br><span class="line"></span><br><span class="line">                <span class="number">1</span>-<span class="number">5</span> 实例化前的准备工作</span><br><span class="line"><span class="comment">//实例化所有剩余的（非惰性初始化）单例。</span></span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">                (doCreateBean:通过反射创建对象</span><br><span class="line">                                                                                             constructor=class.getDeclaredConstructor(), constructor.newinstance()</span><br><span class="line">               此时的bean实例属性值为空)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后一步：发布相应的事件</span></span><br><span class="line">finishRefresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">logger.warn(<span class="string">&quot;Exception encountered during context initialization - &quot;</span> +</span><br><span class="line"><span class="string">&quot;cancelling refresh attempt: &quot;</span> + ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁已经创建的单例以避免悬空资源</span></span><br><span class="line">destroyBeans();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重置“活动”标志。</span></span><br><span class="line">cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Propagate exception to caller.</span></span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//重置 Spring 核心中的常见自省缓存，因为我们可能不再需要单例 bean 的元数据......</span></span><br><span class="line">resetCommonCaches();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Spring加载配置文件到应用程序:调用loadBeanDefinitions(beanFactory);使用BeanDefinitionReader读取配置文件</p><p>​    解析工作(解析bean标签的各种其他0属性,解析构造函数参数,解析property元素等)</p><p><img src="C:\Users\是昊昊昊昊能\AppData\Roaming\Typora\typora-user-images\image-20220811145638375.png" alt="image-20220811145638375"></p><p><img src="C:\Users\是昊昊昊昊能\AppData\Roaming\Typora\typora-user-images\image-20220811150627341.png" alt="image-20220811150627341"></p><p>bean的生命周期</p><p><img src="C:\Users\是昊昊昊昊能\AppData\Roaming\Typora\typora-user-images\image-20220811112012111.png" alt="image-20220811112012111"></p><p>spring容器按照使用者可以分为几类: </p><p>​       1.自定义对象</p><p>​       2.容器对象</p><p><img src="C:\Users\是昊昊昊昊能\AppData\Roaming\Typora\typora-user-images\image-20220811112741781.png" alt="image-20220811112741781"></p><p>如果想要在自定义对象中获取容器对象,则需要实现BeanFactoryAware, ApplicationContextAware接口</p><p>容器调用invokeAware方法,调用aware接口处理器的一些方法实现注入.</p><p>aware接口:</p><p>​         ApplicationContextAware:</p><p><img src="C:\Users\是昊昊昊昊能\AppData\Roaming\Typora\typora-user-images\image-20220811112818610.png" alt="image-20220811112818610"></p><p>​     BeanFactoryAware:</p><p><img src="C:\Users\是昊昊昊昊能\AppData\Roaming\Typora\typora-user-images\image-20220811112844780.png" alt="image-20220811112844780"></p><p>BeanPostProcessor:处理器        主要实现 aop（动态代理）</p><p>前置处理器</p><p><img src="C:\Users\是昊昊昊昊能\AppData\Roaming\Typora\typora-user-images\image-20220811113141501.png" alt="image-20220811113141501"></p><p>后置处理器</p><p><img src="C:\Users\是昊昊昊昊能\AppData\Roaming\Typora\typora-user-images\image-20220811113152110.png" alt="image-20220811113152110"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">容器和对象的创建流程: </span><br><span class="line"></span><br><span class="line">​    <span class="number">1.</span>先创建容器(创建容器之前调用prepareRefresh()方法做一些准备工作(设置容器的启动时间,设置活跃状态为<span class="literal">true</span>,关闭状态为<span class="literal">false</span>和创建一堆空集合))</span><br><span class="line"></span><br><span class="line">​    <span class="number">2.</span>加载配置文件,封装成BeanDinition</span><br><span class="line"></span><br><span class="line">​    <span class="number">3.</span>调用执行beanFactoryPostProcessor</span><br><span class="line">( 准备工作：准备beanPostProcessor,准备监听器事件,广播器)</span><br><span class="line">​    <span class="number">4.</span>实例化</span><br><span class="line"></span><br><span class="line">​    <span class="number">5.</span>初始化</span><br><span class="line"></span><br><span class="line">​    <span class="number">6.</span>获取完整对象</span><br></pre></td></tr></table></figure><p>getBean-doGetBean-CreateBean-doCreateBean</p><p>```</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>代码演示</title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot自动装配"><a href="#SpringBoot自动装配" class="headerlink" title="SpringBoot自动装配"></a>SpringBoot自动装配</h1><pre><code>   自动装配的实现就是为了从Spring.factories文件中获取到对应的bean对象，并且由spring容器来帮我们管理</code></pre><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><p>​        @SpringBootConfiguration      :声明当前类为一个配置类</p><p>​                  @configuration</p><p>​        @EnableAutoConfiguratuin</p><p>​                  @Import(AutoConfigurationImportSelector.class):导入AutoConfigurationImportSelector这个类</p><p>​                                     AutoConfigurationImportSelector.class:  String[] selectImports方法</p><p><img src="https://negnnengblog-1313740827.cos.ap-guangzhou.myqcloud.com/inage/202209051845360.png" alt="image-20220825205224966"></p><p>​                                                    getAutoConfigurationEntry()方法:</p><p>!<img src="https://negnnengblog-1313740827.cos.ap-guangzhou.myqcloud.com/inage/202209051845361.png" alt="image-20220825205353530"></p><p>​                                                                        getCandateConfigurations()方法:</p><p><img src="https://negnnengblog-1313740827.cos.ap-guangzhou.myqcloud.com/inage/202209051845362.png" alt="image-20220825205602358"></p><h1 id="SpringBoot-Starter-的工作原理是什么"><a href="#SpringBoot-Starter-的工作原理是什么" class="headerlink" title="SpringBoot Starter 的工作原理是什么?"></a>SpringBoot Starter 的工作原理是什么?</h1><p>SpringBoot 在启动的时候会干这几种事情:</p><p>​                 1.SpringBoot在启动时会去依赖的Starter包中寻找resources/META-INF/spring.factories文件,然后根据文件中配置的jar包</p><p>​      去扫描项目所依赖的jar包</p><p>​                 2.根据spring.factories配置加载AutoConfigure类</p><p>​                3.根据@Conditional注解的条件,进行自动配置并将Bean注入Spring Context</p><p>   总结一下，其实就是SpringBoot在启动的时候，按照约定去读取SpringBoot Starter的配置信息,再根据配置信息对资源进行初始化,并注入到Spring容器中.这样SpringBoot启动完毕后，就已经准备好了一切资源，使用过程中直接注入对应bean资源即可.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: 'ZhuZiAYuanJWD';  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: 'iconfont' !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  .bangumi-active {    background: #dbecfe !important;    border-radius: 10px !important;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: #dbecfe !important;    border-radius: 10px !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme='dark'] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme='dark'] .card-widget {    background: #121212 !important;  }    [data-theme='dark'] div#post {    background: #121212 !important;  }    [data-theme='dark'] div#tag {    background: #121212 !important;  }    [data-theme='dark'] div#archive {    background: #121212 !important;  }    [data-theme='dark'] div#page {    background: #121212 !important;  }    [data-theme='dark'] div#category {    background: #121212 !important;  }    [data-theme='dark'] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #49b1f5;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #49b1f5;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* 鼠标图标 */  body {    cursor: url('/img/x1.cur'), auto;  }  a,  [type='button']:not(:disabled),  [type='reset']:not(:disabled),  [type='submit']:not(:disabled),  button:not(:disabled) {    cursor: url('/img/x2.cur'), auto !important;  }  /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #49b1f5;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft JhengHei', 'Microsoft YaHei', sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--heo-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }  ]]></content>
      
    </entry>
    
    
  
</search>
