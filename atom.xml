<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>能能`Blog</title>
  
  <subtitle>生活明朗，万物可爱.</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-05T06:28:44.416Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>能能</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>代码演示</title>
    <link href="http://example.com/posts/0.html"/>
    <id>http://example.com/posts/0.html</id>
    <published>2022-09-05T05:59:12.000Z</published>
    <updated>2022-09-05T06:28:44.416Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">代码块的演示</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Spirng源码</title>
    <link href="http://example.com/posts/1.html"/>
    <id>http://example.com/posts/1.html</id>
    <published>2022-09-05T05:59:12.000Z</published>
    <updated>2022-09-05T07:45:32.931Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### Spring源码</span><br><span class="line"></span><br><span class="line">​     </span><br><span class="line"></span><br><span class="line">   Spring的执行流程:</span><br><span class="line"></span><br><span class="line">![image-20220811094012328](C:\Users\是昊昊昊昊能\AppData\Roaming\Typora\typora-user-images\image-20220811094012328.png)</span><br><span class="line"></span><br><span class="line">&gt; BeanDefinitionReader是一个简单的接口，是用于读取Spring配置文件的内容，并转换为BeanDefinition。0.</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">- PropertiesBeanDefinitionReader：是一个具体实现类，可以从properties文件读取Bean定义信息。</span><br><span class="line">- XmlBeanDefinitionReader：具体实现类，可以从XML文件读取Bean定义信息。</span><br></pre></td></tr></table></figure><blockquote><p>BeanDefinition:存储bean的信息,</p><p>BeanFactoryPostProcessor: 加载配置文件的时候不会进行值的替换,这时需要调用BeanFactory的后置处理器做一些字符替换</p><p>map结构存储bean</p><p> beanFactory:定义获取bean及bean的各种属性,提供访问bean容器的入口。(等同于容器,操作beanfactory等于操作容器)</p></blockquote><p>Spring核心源码（包含13个方法）:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="built_in">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line"><span class="comment">// 准备此上下文以进行刷新。</span></span><br><span class="line">            <span class="comment">//设置容器创建时间,和一些空集合</span></span><br><span class="line">prepareRefresh();</span><br><span class="line"></span><br><span class="line">         </span><br><span class="line"><span class="comment">// 告诉子类刷新内部 bean 工厂。</span></span><br><span class="line">            <span class="comment">//先创建beanFactory   (DefaultListableBeanFactory beanFactory = createBeanFactory();)</span></span><br><span class="line">            <span class="comment">//调用loadBeanDefinitions(beanFactory);使用BeanDefinitionReader读取配置文件</span></span><br><span class="line">            <span class="comment">//从配置文件加载bean的定义信息封装成一个集合,保存到BeanDefinition中</span></span><br><span class="line"><span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> obtainFreshBeanFactory();</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 准备在此上下文中使用的bean工厂</span></span><br><span class="line">            <span class="comment">//(此时容器中除了一些bean信息，然后是空的)所以要给bean工厂设置一些属性值</span></span><br><span class="line">prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 允许在上下文子类中对bean工厂进行后处理。</span></span><br><span class="line">                <span class="comment">//空,留给子类扩展使用</span></span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用在上下文中注册为bean的工厂处理器。</span></span><br><span class="line">                <span class="comment">//实例化并调用所有已注册的 BeanFactoryPostProcessor</span></span><br><span class="line">                <span class="comment">//( 准备工作：准备beanPostProcessor,准备监听器事件,广播器)</span></span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//实例化并注册所有 BeanPostProcessor bean，如果给定</span></span><br><span class="line">                <span class="comment">//则尊重显式顺序。 &lt;p&gt;必须在应用程序 bean 的任何实例化之前调用</span></span><br><span class="line"><span class="comment">//注册拦截bean创建的bean处理器</span></span><br><span class="line"><span class="number">1.</span>registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为此上下文初始化消息源。</span></span><br><span class="line">                <span class="comment">//国际化的一些操作</span></span><br><span class="line"><span class="number">2.</span>initMessageSource();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为此上下文初始化事件多播器</span></span><br><span class="line"><span class="number">3.</span>initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化特定上下文子类中的其他特殊 bean。</span></span><br><span class="line">                <span class="comment">//空</span></span><br><span class="line"><span class="number">4.</span>onRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查侦听器 bean 并注册它们。</span></span><br><span class="line"><span class="number">5.</span>registerListeners();</span><br><span class="line"></span><br><span class="line">                <span class="number">1</span>-<span class="number">5</span> 实例化前的准备工作</span><br><span class="line"><span class="comment">//实例化所有剩余的（非惰性初始化）单例。</span></span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">                (doCreateBean:通过反射创建对象</span><br><span class="line">                                                                                             constructor=class.getDeclaredConstructor(), constructor.newinstance()</span><br><span class="line">               此时的bean实例属性值为空)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后一步：发布相应的事件</span></span><br><span class="line">finishRefresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">logger.warn(<span class="string">&quot;Exception encountered during context initialization - &quot;</span> +</span><br><span class="line"><span class="string">&quot;cancelling refresh attempt: &quot;</span> + ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁已经创建的单例以避免悬空资源</span></span><br><span class="line">destroyBeans();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重置“活动”标志。</span></span><br><span class="line">cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Propagate exception to caller.</span></span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//重置 Spring 核心中的常见自省缓存，因为我们可能不再需要单例 bean 的元数据......</span></span><br><span class="line">resetCommonCaches();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Spring加载配置文件到应用程序:调用loadBeanDefinitions(beanFactory);使用BeanDefinitionReader读取配置文件</p><p>​    解析工作(解析bean标签的各种其他0属性,解析构造函数参数,解析property元素等)</p><p><img src="C:\Users\是昊昊昊昊能\AppData\Roaming\Typora\typora-user-images\image-20220811145638375.png" alt="image-20220811145638375"></p><p><img src="C:\Users\是昊昊昊昊能\AppData\Roaming\Typora\typora-user-images\image-20220811150627341.png" alt="image-20220811150627341"></p><p>bean的生命周期</p><p><img src="C:\Users\是昊昊昊昊能\AppData\Roaming\Typora\typora-user-images\image-20220811112012111.png" alt="image-20220811112012111"></p><p>spring容器按照使用者可以分为几类: </p><p>​       1.自定义对象</p><p>​       2.容器对象</p><p><img src="C:\Users\是昊昊昊昊能\AppData\Roaming\Typora\typora-user-images\image-20220811112741781.png" alt="image-20220811112741781"></p><p>如果想要在自定义对象中获取容器对象,则需要实现BeanFactoryAware, ApplicationContextAware接口</p><p>容器调用invokeAware方法,调用aware接口处理器的一些方法实现注入.</p><p>aware接口:</p><p>​         ApplicationContextAware:</p><p><img src="C:\Users\是昊昊昊昊能\AppData\Roaming\Typora\typora-user-images\image-20220811112818610.png" alt="image-20220811112818610"></p><p>​     BeanFactoryAware:</p><p><img src="C:\Users\是昊昊昊昊能\AppData\Roaming\Typora\typora-user-images\image-20220811112844780.png" alt="image-20220811112844780"></p><p>BeanPostProcessor:处理器        主要实现 aop（动态代理）</p><p>前置处理器</p><p><img src="C:\Users\是昊昊昊昊能\AppData\Roaming\Typora\typora-user-images\image-20220811113141501.png" alt="image-20220811113141501"></p><p>后置处理器</p><p><img src="C:\Users\是昊昊昊昊能\AppData\Roaming\Typora\typora-user-images\image-20220811113152110.png" alt="image-20220811113152110"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">容器和对象的创建流程: </span><br><span class="line"></span><br><span class="line">​    <span class="number">1.</span>先创建容器(创建容器之前调用prepareRefresh()方法做一些准备工作(设置容器的启动时间,设置活跃状态为<span class="literal">true</span>,关闭状态为<span class="literal">false</span>和创建一堆空集合))</span><br><span class="line"></span><br><span class="line">​    <span class="number">2.</span>加载配置文件,封装成BeanDinition</span><br><span class="line"></span><br><span class="line">​    <span class="number">3.</span>调用执行beanFactoryPostProcessor</span><br><span class="line">( 准备工作：准备beanPostProcessor,准备监听器事件,广播器)</span><br><span class="line">​    <span class="number">4.</span>实例化</span><br><span class="line"></span><br><span class="line">​    <span class="number">5.</span>初始化</span><br><span class="line"></span><br><span class="line">​    <span class="number">6.</span>获取完整对象</span><br></pre></td></tr></table></figure><p>getBean-doGetBean-CreateBean-doCreateBean</p><p>```</p>]]></content>
    
    
    <summary type="html">Spring源码详解</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/posts/4a17b156.html"/>
    <id>http://example.com/posts/4a17b156.html</id>
    <published>2022-09-05T02:42:52.013Z</published>
    <updated>2022-09-05T06:42:29.731Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
